AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  jpegger

  Sample SAM Template for jpegger with enhanced disaster recovery capabilities

Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    Runtime: nodejs18.x
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,PUT,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Metadata:
  BuildMethod: esbuild

Parameters:
  Env:
    Type: String
    Default: dev
  UserPoolAdminGroupName:
    Description: Group name for  administrators
    Type: String
    Default: 'AdminGroup'
  AuthCallbackUrl:
    Type: String
    Description: Auth callback in production
    Default: 'https://main.d2cb8nb37vaa0c.amplifyapp.com'
  AuthCallbackUrlLocal:
    Type: String
    Description: Auth callback in production
    Default: 'http://localhost:3000'
  PrimaryRegion:
    Type: String
    Default: "eu-central-1"
  DRRegion:
    Type: String
    Default: "eu-west-1"
  DomainName:
    Type: String
    Description: Domain name for the API
    Default: "api.example.com"
  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID
    Default: "Z1234567890ABC"
  AlertEmail:
    Type: String
    Description: Email address for DR notifications
    Default: "dacostaful@gmail.com"

Conditions:
  IsPrimaryRegion: !Equals [ !Ref AWS::Region, !Ref PrimaryRegion ]
  IsDRRegion: !Not [ !Condition IsPrimaryRegion ]

Resources:
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NodeModules
      Description: Contains node_modules for Lambda functions
      ContentUri: lambda-layers/
      CompatibleRuntimes:
        - nodejs18.x

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref NodeModulesLayer
      CodeUri: src/
      Handler: authorizer.handler
      Runtime: nodejs18.x
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName
      Tags:
        Stack: !Sub "${AWS::StackName}"

  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessLogs"

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccountLoggingSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiLoggingRole.Arn

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      UserPoolTags:
        Key: Name
        Value: !Sub ${AWS::StackName} User Pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
#          RequireNumbers: true
#          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        !Sub ${AWS::StackName}-UserPoolClient
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 6
      IdTokenValidity: 6
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
        - 'implicit'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
        - 'aws.cognito.signin.user.admin'
      CallbackURLs:
        - !Ref AuthCallbackUrl
        - !Ref AuthCallbackUrlLocal

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  # DynamoDB Table
  GlobalTable:
    Type: AWS::DynamoDB::GlobalTable
    Condition: IsPrimaryRegion
    Properties:
      TableName: !Sub '${AWS::StackName}-GlobalTable'
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: ImageId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: ImageId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Replicas:
        - Region: !Ref PrimaryRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: !Ref DRRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true

  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-staging-bucket-${AWS::Region}'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PrimaryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-primary-bucket-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration: !If
        - IsPrimaryRegion
        - Role: !GetAtt S3ReplicationRole.Arn
          Rules:
            - Destination:
                Bucket: !Sub 'arn:aws:s3:::${AWS::StackName}-primary-bucket-${DRRegion}'
              Status: Enabled
              Prefix: ""
              Priority: 1
        - !Ref 'AWS::NoValue'

  BucketBin:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-bucket-bin-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration: !If
        - IsPrimaryRegion
        - Role: !GetAtt S3ReplicationRole.Arn
          Rules:
            - Destination:
                Bucket: !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-bin-${DRRegion}'
              Status: Enabled
              Prefix: ""
        - !Ref 'AWS::NoValue'

  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReplicationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ReplicateTags
                  - s3:GetObjectVersionForReplication
                  - s3:GetBucketVersioning
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-primary-bucket-${AWS::Region}'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-primary-bucket-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-primary-bucket-${DRRegion}'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-primary-bucket-${DRRegion}/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-bin-${AWS::Region}'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-bin-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-bin-${DRRegion}'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-bucket-bin-${DRRegion}/*'

  ImageUploadHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/image-upload.handler
      Policies:
        - S3WritePolicy:
            BucketName: !Ref StagingBucket
        - DynamoDBWritePolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
        - LambdaInvokePolicy:
            FunctionName: !Ref WatermarkHandler
      Events:
        UploadImageApi:
          Type: Api
          Properties:
            Path: /upload
            Method: post
      Environment:
        Variables:
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
          STAGING_BUCKET: !Ref StagingBucket
          WATERMARK_HANDLER_NAME: !Ref WatermarkHandler

  FetchAllImagesHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/all-images.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
        - S3ReadPolicy:
            BucketName: !Ref PrimaryBucket
      Environment:
        Variables:
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
          BUCKET_NAME: !Ref PrimaryBucket
      Events:
        FetchAllImagesApi:
          Type: Api
          Properties:
            Path: /images
            Method: GET

  FetchUserImagesHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/user-images.handler
      MemorySize: 128
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
        - S3ReadPolicy:
            BucketName: !Ref PrimaryBucket
      Environment:
        Variables:
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
          BUCKET_NAME: !Ref PrimaryBucket
      Events:
        FetchUserImagesApi:
          Type: Api
          Properties:
            Path: /user-images
            Method: get

  FetchDeletedImagesHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/fetch-deleted-images.handler
      MemorySize: 128
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
        - S3ReadPolicy:
            BucketName: !Ref BucketBin
      Environment:
        Variables:
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
          BIN_BUCKET: !Ref BucketBin
      Events:
        FetchUserImagesApi:
          Type: Api
          Properties:
            Path: /deleted-images
            Method: get

  SoftDeleteImageHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/soft-delete-image.handler
      MemorySize: 128
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PrimaryBucket
        - S3WritePolicy:
            BucketName: !Ref BucketBin
        - DynamoDBCrudPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
      Environment:
        Variables:
          BUCKET_NAME: !Ref PrimaryBucket
          BUCKET_BIN: !Ref BucketBin
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
      Events:
        MoveImageApi:
          Type: Api
          Properties:
            Path: /soft-delete-image
            Method: post

  RestoreImageHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/restore-image.handler
      MemorySize: 128
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketBin
        - S3WritePolicy:
            BucketName: !Ref PrimaryBucket
        - DynamoDBCrudPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
      Environment:
        Variables:
          BUCKET_NAME: !Ref PrimaryBucket
          BUCKET_BIN: !Ref BucketBin
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
      Events:
        MoveImageApi:
          Type: Api
          Properties:
            Path: /restore-image
            Method: post

  PermanentDeleteImageHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/permanent-delete-image.handler
      MemorySize: 128
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketBin
        - DynamoDBCrudPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
      Environment:
        Variables:
          BUCKET_BIN: !Ref BucketBin
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'
      Events:
        PermanentDeleteImageApi:
          Type: Api
          Properties:
            Path: /delete-image
            Method: post

  ShareImageHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/share-image.handler
      MemorySize: 128
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PrimaryBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref PrimaryBucket
      Events:
        ShareImageApi:
          Type: Api
          Properties:
            Path: /share-image
            Method: post

  WatermarkHandler:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Timeout: 10
      Handler: src/handlers/watermark.handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref StagingBucket
        - S3CrudPolicy:
            BucketName: !Ref PrimaryBucket
        - DynamoDBCrudPolicy:
            TableName: !Sub '${AWS::StackName}-GlobalTable'
      Environment:
        Variables:
          PRIMARY_BUCKET: !Ref PrimaryBucket
          STAGING_BUCKET: !Ref StagingBucket
          REGION: !Ref PrimaryRegion
          TABLE_NAME: !Sub '${AWS::StackName}-GlobalTable'

  RestAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: CustomTokenAuthorizer
      RestApiId: !Sub ${ServerlessRestApi}
      Type: TOKEN


  # API Gateway with custom domain
#  APIGateway:
#    Type: AWS::Serverless::Api
#    Properties:
#      Name: !Sub "${AWS::StackName}-api-${AWS::Region}"
#      StageName: Prod
#      EndpointConfiguration:
#        Type: REGIONAL
#      AccessLogSetting:
#        DestinationArn: !GetAtt AccessLogs.Arn
#        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency"}'
#      DefinitionBody:
#        swagger: '2.0'
#        info:
#          title: !Sub "${AWS::StackName} API"
#          version: '1.0'
#        securityDefinitions:
#          CustomAuthorizer:
#            type: apiKey
#            name: Authorization
#            in: header
#            x-amazon-apigateway-authtype: custom
#            x-amazon-apigateway-authorizer:
#              type: token
#              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations"
#              authorizerResultTtlInSeconds: 300
#        paths: { }

  APIGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref APICertificate
      DomainName: !If
        - IsPrimaryRegion
        - !Sub "api.${DomainName}"
        - !Sub "dr-api.${DomainName}"
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

#  APIGatewayMapping:
#    Type: AWS::ApiGateway::BasePathMapping
#    Properties:
#      DomainName: !Ref APIGatewayDomainName
#      RestApiId: !Ref APIGateway
#      Stage: Prod

  # Certificate for API Gateway
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsPrimaryRegion
        - !Sub "api.${DomainName}"
        - !Sub "dr-api.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If
            - IsPrimaryRegion
            - !Sub "api.${DomainName}"
            - !Sub "dr-api.${DomainName}"
          HostedZoneId: !Ref HostedZoneId

  # Health Check and Failover Components
  ApiHealthCheck:
    Type: AWS::Route53::HealthCheck
    Condition: IsPrimaryRegion
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        ResourcePath: /Prod/health
        FullyQualifiedDomainName: !Sub "api.${DomainName}"
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-api-health-check"

  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsPrimaryRegion
    Properties:
      AlarmName: !Sub "${AWS::StackName}-api-health-alarm"
      AlarmDescription: "Alarm when API Gateway health check fails"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref ApiHealthCheck
      AlarmActions:
        - !Ref FailoverSNSTopic
      InsufficientDataActions:
        - !Ref FailoverSNSTopic

  # Simple endpoint for health check
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/health-check.handler
      CodeUri: src/
      Runtime: nodejs18.x
      Events:
        HealthCheckApi:
          Type: Api
          Properties:
            Path: /health
            Method: get

  # Failover SNS Topic and Lambda
  FailoverSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::StackName}-failover-topic"
      TopicName: !Sub "${AWS::StackName}-failover-topic"

  FailoverEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref FailoverSNSTopic
      Endpoint: !Ref AlertEmail

  FailoverLambdaSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsPrimaryRegion
    Properties:
      Protocol: lambda
      TopicArn: !Ref FailoverSNSTopic
      Endpoint: !GetAtt FailoverLambda.Arn

  FailoverLambda:
    Type: AWS::Serverless::Function
    Condition: IsPrimaryRegion
    Properties:
      Handler: src/handlers/failover.handler
      CodeUri: src/
      Runtime: nodejs18.x
      Timeout: 60
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
                - route53:GetChange
                - route53:ListResourceRecordSets
              Resource:
                - !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
                - !Sub "arn:aws:route53:::change/*"
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
          DOMAIN_NAME: !Ref DomainName
          PRIMARY_REGION: !Ref PrimaryRegion
          DR_REGION: !Ref DRRegion

  FailoverLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsPrimaryRegion
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FailoverLambda
      Principal: sns.amazonaws.com
      SourceArn: !Ref FailoverSNSTopic

  # Route53 Records for API Gateway
  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsPrimaryRegion
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "api.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt APIGatewayDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: true
      SetIdentifier: !Sub "${AWS::StackName}-primary"
      Weight: 100
      HealthCheckId: !Ref ApiHealthCheck

  DrApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsDRRegion
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "api.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt APIGatewayDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: true
      SetIdentifier: !Sub "${AWS::StackName}-dr"
      Weight: 0  # Will be changed to 100 by the failover lambda

  # Failover recovery check
  RecoveryCheckFunction:
    Type: AWS::Serverless::Function
    Condition: IsPrimaryRegion
    Properties:
      Handler: src/handlers/recovery-check.handler
      CodeUri: src/
      Runtime: nodejs18.x
      Timeout: 60
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
                - route53:GetChange
                - route53:ListResourceRecordSets
              Resource:
                - !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
                - !Sub "arn:aws:route53:::change/*"
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref FailoverSNSTopic
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
          DOMAIN_NAME: !Ref DomainName
          PRIMARY_REGION: !Ref PrimaryRegion
          DR_REGION: !Ref DRRegion
          SNS_TOPIC_ARN: !Ref FailoverSNSTopic
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Name: RecoveryCheckSchedule
            Description: "Check if primary region is healthy and can be restored"
            Enabled: true

Outputs:
#  HelloWorldApi:
#    Description: API Gateway endpoint URL for Prod stage for Hello World function
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  PrimaryApiEndpoint:
    Description: Primary API Gateway endpoint URL
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  CustomDomainEndpoint:
    Description: Custom domain endpoint URL
    Value: !Sub "https://${APIGatewayDomainName}/"
  PrimaryRegion:
    Description: Primary AWS Region
    Value: !Ref PrimaryRegion
  DRRegion:
    Description: Disaster Recovery AWS Region
    Value: !Ref DRRegion
  StagingBucketName:
    Value: !Ref StagingBucket
  PrimaryBucketName:
    Value: !Ref PrimaryBucket
  ImagesTableName:
    Value: !Sub '${AWS::StackName}-GlobalTable'
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
